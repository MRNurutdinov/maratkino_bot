from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import asyncio
from aiogram.dispatcher import  FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import re
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from database import MyDB
import sys
import logging
from logging import FileHandler

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
handler = FileHandler("job_information.log",'w', 'utf-8')
logger.addHandler(handler)

citys={"–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥":2,"–ú–æ—Å–∫–≤–∞":3,"–°–∞–º–∞—Ä–∞":4,"–ï–∫–∞—Ç–µ—Ä–µ–Ω–±—É—Ä–≥":5,"–û–º—Å–∫":6,
       "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫":7,"–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫":7,"–ò—Ä–∫—É—Ç—Å–∫":8,"–ß–∏—Ç–∞":9,"–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫":10,
       "–ú–∞–≥–∞–¥–∞–Ω":11,"–Æ–∂–Ω—ã–π-–°–∞—Ö–∞–ª–∏–Ω—Å–∫":11,"–°—Ä–µ–¥–Ω–µ–∫–æ–ª—ã–º—Å–∫":11,"–ê–Ω–∞–¥—ã—Ä—å":12,"–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–ö–∞–º—á–∞—Ç—Å–∫–∏–π":12}

db=MyDB()
loop=asyncio.new_event_loop()
TOKEN=open("sequrites.gitignore").read().split()[0]
bot = Bot(token=TOKEN,parse_mode="HTML")
storage=MemoryStorage()
dp = Dispatcher(bot,storage=storage,loop=loop)


@dp.message_handler(commands=['start'],state=None)
async def process_start_command(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    items=[types.KeyboardButton(city) for city in citys.keys()]
    markup.add(*items)
    await bot.send_sticker(message.chat.id, open("Stikers/start.webp", "rb"))
    await bot.send_message(message.chat.id,
                     f"<b>–°—ç–ª—ç–º,{message.from_user.first_name}!</b>\n–ú–∏–Ω —Ö–∏–Ω–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫! –ö–∞–∫–æ–π —É —Ç–µ–±—è —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å?",
                     parse_mode="html",reply_markup=markup)
    await Add_task.step3.set()

from add_task import Add_task
@dp.message_handler(state=Add_task.step3)
async def get_name_task(message: types.Message,state:FSMContext):
    time_zone = message.text
    if time_zone not in citys.keys():
        await message.answer("<b>–≠—ç—ç–π, –±–∞–ª–∞–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!</b>\n")
    else:
        await message.answer("–≠–π–±—ç—Ç! –Ø –∑–∞–ø–æ–º–Ω–∏–ª.")
        await db.add_person(message.chat.id,int(citys[time_zone]))
        await state.finish()
        await menu(message)

@dp.message_handler(commands=['üè°–ú–µ–Ω—é'], state=None)
async def menu(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    items = [types.KeyboardButton("/üìù–°–æ–∑–¥–∞—Ç—å_–∑–∞–¥–∞—á—É"), types.KeyboardButton("/üåç–ò–∑–º–µ–Ω–∏—Ç—å_—á–∞—Å–æ–≤–æ–π_–ø–æ—è—Å"),types.KeyboardButton("/üßæ–°–ø–∏—Å–æ–∫_–∑–∞–¥–∞—á")]
    markup.add(*items)
    await bot.send_message(message.from_user.id, "<b>–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?</b>", parse_mode="html",
                           reply_markup=markup)

#–°–µ–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏, –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@dp.message_handler(commands=['üìù–°–æ–∑–¥–∞—Ç—å_–∑–∞–¥–∞—á—É'], state=None)
async def create_task(message: types.Message):
    await bot.send_message(message.from_user.id, "<b>–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∑–∞–¥–∞—á—É, –±–∞–ª–∞–º</b>", parse_mode="html")
    await Add_task.step1.set()

@dp.message_handler(state=Add_task.step1)
async def get_name_task(message: types.Message,state:FSMContext):
    name_task=message.text
    await state.update_data(
        {
            'name_task':name_task
        }
    )
    await message.answer("<b>–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?</b>\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: –î–î.–ú–ú.–ì–ì —á—á:–º–º")
    await Add_task.step2.set()

@dp.message_handler(state=Add_task.step2)
async def get_time_task(message: types.Message,state:FSMContext):
    text=await state.get_data()
    name_task=text.get("name_task")
    time_remember=message.text
    if re.search(r'\d\d\.\d\d\.\d{2} \d\d:\d\d',time_remember)==None:
        await message.answer("<b>–≠—ç—ç–π, –±–∞–ª–∞–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!</b>\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì —á—á:–º–º")
        logger.warning(f"[WARNING] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞, –≤–≤–µ–ª–∏={time_remember} (id_chat={message.chat.id})")
    else:
        r=await db.add_task(message.chat.id, name_task, time_remember)
        if r!=False:
            logger.info(f"[INFO] –í —á–∞—Ç–µ={message.chat.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –∑–∞–¥–∞—á—É={name_task}. –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:{time_remember})")
            await message.answer("–≠–π–±—ç—Ç! –Ø –∑–∞–ø–æ–º–Ω–∏–ª.")
            await state.finish()
        else:
            await message.answer("<b>–≠—ç—ç–π, –±–∞–ª–∞–º, –Ω–µ—Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–Ω—è!</b>\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì —á—á:–º–º")
#–°–µ–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å

#–°–µ–∫—Ü–∏—è: –ê –ø–æ–∫–∞–∂–∏ –∫–∞ –º–Ω–µ –º–æ–π to-do list, –∞ —Ç–∞–∫ –∂–µ —É–¥–∞–ª–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∏
@dp.message_handler(commands=['üßæ–°–ø–∏—Å–æ–∫_–∑–∞–¥–∞—á'])
async def show_tasks(message: types.Message):
    info_tasks,timezone= await db.get_task(int(message.chat.id))
    msg="<b>üßæ–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:</b>\n\n"
    count=0
    for task in info_tasks:
        time_rem=str(task[1]).split('+')[0].split()
        date = time_rem[0].split("-")
        if int(time_rem[1][:2])+timezone>=24:
            oclock = str(int(time_rem[1][:2]) + timezone-24) + ":" + time_rem[1][3:5]
            date[2]=str(int(date[2])+1)
        else:
            oclock=str(int(time_rem[1][:2])+timezone)+":"+time_rem[1][3:5]
        msg=msg+f"{count+1}){task[0]}\n  –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {oclock+' '+'.'.join(date[2::-1])}\n\n"
        count=count+1
    msg+="<b>–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Å–Ω—è—Ç—å?</b>"
    ikb_menu=types.InlineKeyboardMarkup(row_width=5,
                                        inline_keyboard=[[types.InlineKeyboardButton(text=str(i+1+num_row),callback_data="del_"+str(i+1+num_row))
                                                          for i in range(3) if i+1+num_row<=len(info_tasks)] for num_row in range(0,len(info_tasks),3)])
    await message.answer(msg,reply_markup=ikb_menu)

from aiogram.dispatcher.filters import Text
@dp.callback_query_handler(Text(startswith="del_"))
async def delete_an_task(call: types.CallbackQuery):
    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ, –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    num_task = int(call.data.split("del_")[1])
    await db.del_task(call.message.chat.id,num_task)
    await call.message.edit_text(f"–ì–æ—Ç–æ–≤–æ. –ó–∞–¥–∞—á–∞ ‚Ññ{num_task} —É–¥–∞–ª–µ–Ω–∞")

#–ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
async def get_hour_city(num): #–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É
    for k in citys.keys():
        if citys[k] == num:
            return k

@dp.message_handler(commands=['üåç–ò–∑–º–µ–Ω–∏—Ç—å_—á–∞—Å–æ–≤–æ–π_–ø–æ—è—Å'],state=None)
async def process_start_command(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    items=[types.KeyboardButton(city) for city in citys.keys()]
    markup.add(*items)
    time_zone_now=await db.get_hour(message.chat.id)
    city_now=await get_hour_city(time_zone_now)
    await bot.send_message(message.chat.id,
                     f"<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –°–º–µ–Ω–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ —Å–º–µ—Å—Ç–∏—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É –ø–æ—è—Å–æ–≤.\n–í–∞—à —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{city_now}</b>\n–ù–∞ –∫–∞–∫–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
                     f"",
                     parse_mode="html",reply_markup=markup)
    await Add_task.change_time_zone.set()

@dp.message_handler(state=Add_task.change_time_zone)
async def get_name_task(message: types.Message,state:FSMContext):
    time_zone = message.text
    if time_zone not in citys.keys():
        await message.answer("<b>–≠—ç—ç–π, –±–∞–ª–∞–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!</b>\n")
    else:
        await message.answer("–≠–π–±—ç—Ç! –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑–º—ë–Ω–µ–Ω.")
        time_zone_past = await db.get_hour(message.chat.id)
        time_zone_now=int(citys[time_zone])
        # await db.update_time_zone(message.chat.id,time_zone_now,time_zone_past)
        await db.add_person(message.chat.id, time_zone_now)
        await state.finish()
        await menu(message)

async def time_1_min():
    datas=await db.get_tasks_by_time()
    if len(datas)>0:
        for id,text in datas:
            chat_id=await db.get_chat_id(id)
            await bot.send_message(chat_id=int(chat_id),text=f"<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n</b>{text}")



if __name__ == '__main__':
    scheduler=AsyncIOScheduler()
    scheduler.add_job(time_1_min,"interval",seconds=60)
    scheduler.start()
    executor.start_polling(dp,skip_updates=True)